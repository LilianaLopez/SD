<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
    http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">

	<tx:annotation-driven />
	
	<context:property-placeholder location="WEB-INF/conf.properties" />

	<context:component-scan base-package="com.sd.uni.biblioteca.dao"/>
	<context:component-scan base-package="com.sd.uni.biblioteca.service"/>
	<context:component-scan base-package="com.sd.uni.biblioteca.resource" />
	

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.className}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${sessionFactory.hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${sessionFactory.hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${sessionFactory.hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
		<property name="packagesToScan" value="${sessionFactory.packagesToScan}" />
	</bean>

	<bean id="transactionManager"
		class="${transactionManager}"
		p:sessionFactory-ref="sessionFactory">
	</bean>
	
	<cache:annotation-driven />

	<bean name="cacheManager" class="com.google.code.ssm.spring.SSMCacheManager">
		<property name="caches">
			<set>
				<bean class="com.google.code.ssm.spring.SSMCache">
					<constructor-arg name="cache" index="0" ref="defaultCache" />
					<!-- 5 minutes -->
					<constructor-arg name="expiration" index="1" value="${cache.expiration}" />
					<!-- @CacheEvict(..., "allEntries" = true) won't work because allowClear 
						is false, so we won't flush accidentally all entries from memcached instance -->
					<constructor-arg name="allowClear" index="2" value="${cache.allowClear}" />
				</bean>
			</set>
		</property>
	</bean>

	<bean name="defaultCache" class="com.google.code.ssm.CacheFactory">
		<property name="cacheName" value="${cache.name}" />
		<property name="cacheClientFactory">
			<bean name="cacheClientFactory"
				class="com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl" />
		</property>
		<property name="addressProvider">
			<bean class="com.google.code.ssm.config.DefaultAddressProvider">
				<property name="address" value="${cache.ip}:${cache.port}" />
			</bean>
		</property>
		<property name="configuration">
			<bean class="com.google.code.ssm.providers.CacheConfiguration">
				<property name="consistentHashing" value="${cache.consistentHashing}" />
			</bean>
		</property>
	</bean>
	
	<!-- Spring Security Configuration -->
	<import resource="securityContext.xml" />

</beans>